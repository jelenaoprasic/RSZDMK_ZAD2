#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <util/delay.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

//Velicina prijemnog bafera (mora biti 2^n)
#define USART_RX_BUFFER_SIZE 64

char Rx_Buffer[USART_RX_BUFFER_SIZE];			//prijemni FIFO bafer
volatile unsigned char Rx_Buffer_Size = 0;	//broj karaktera u prijemnom baferu
volatile unsigned char Rx_Buffer_First = 0;
volatile unsigned char Rx_Buffer_Last = 0;

#define BR_KORISNIKA 10
 char ime[0][64];
 char pin_pokusaj[0][10];
 char korisnici[BR_KORISNIKA][64] =

{	"Milica Milic",

    "Petar Peric",
    
 	"Suzana Suzic",

    "Snezana Patuljci",

    "Pepeljuga Pepeljugic"
      
    "Jelena Jelenic",

    "Tamara Tamaric",

    "Ivana Ivanic",

    "Jasna Jasnic",

    "Crvenkapa Vuk"

};

char  PIN[BR_KORISNIKA][10] = {"5346", "2133", "7445", "8756", "7435",  "1236", "7895", "3691", "8845","3521"};

ISR(USART_RX_vect)
{
  	Rx_Buffer[Rx_Buffer_Last++] = UDR0;		//ucitavanje primljenog karaktera
	Rx_Buffer_Last &= USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
	if (Rx_Buffer_Size < USART_RX_BUFFER_SIZE)
		Rx_Buffer_Size++;					//inkrement brojaca primljenih karaktera
}

void usartInit(unsigned long baud)
{
	UCSR0A = 0x00;	//inicijalizacija indikatora
					//U2Xn = 0: onemogucena dvostruka brzina
					//MPCMn = 0: onemogucen multiprocesorski rezim

	UCSR0B = 0x98;	//RXCIEn = 1: dozvola prekida izavanog okoncanjem prijema
					//RXENn = 1: dozvola prijema
					//TXENn = 1: dozvola slanja

	UCSR0C = 0x06;	//UMSELn[1:0] = 00: asinroni rezim
					//UPMn[1:0] = 00: bit pariteta se ne koristi
					//USBSn = 0: koristi se jedan stop bit
					//UCSzn[2:0] = 011: 8bitni prenos

	UBRR0 = F_CPU / (16 * baud) - 1;

	sei();	//I = 1 (dozvola prekida)
}

unsigned char usartAvailable()
{
	return Rx_Buffer_Size;		//ocitavanje broja karaktera u prijemnom baferu
}

void usartPutChar(char c)
{
	while(!(UCSR0A & 0x20));	//ceka da se setuje UDREn (indikacija da je predajni bafer prazan)
	UDR0 = c;					//upis karaktera u predajni bafer
}

void usartPutString(char *s)
{
	while(*s != 0)				//petlja se izvrsava do nailaska na nul-terminator
	{
		usartPutChar(*s);		//slanje tekuceg karaktera
		s++;					//azuriranje pokazivaca na tekuci karakter
	}
}

void usartPutString_P(const char *s)
{
	while (1)
	{
		char c = pgm_read_byte(s++);	//citanje sledeceg karaktera iz programske memorije
		if (c == '\0')					//izlazak iz petlje u slucaju
			return;						//nailaska na terminator
		usartPutChar(c);				//slanje karaktera
	}
}

char usartGetChar()
{
	char c;

	if (!Rx_Buffer_Size)						//bafer je prazan?
		return -1;
  	c = Rx_Buffer[Rx_Buffer_First++];			//citanje karaktera iz prijemnog bafera
	Rx_Buffer_First &= USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
	Rx_Buffer_Size--;							//dekrement brojaca karaktera u prijemnom baferu

	return c;
}

unsigned char usartGetString(char *s)
{
	unsigned char len = 0;

	while(Rx_Buffer_Size) 			//ima karaktera u faferu?
		s[len++] = usartGetChar();	//ucitavanje novog karaktera

	s[len] = 0;						//terminacija stringa
	return len;						//vraca broj ocitanih karaktera
}

int main()
{
	usartInit( 9600);
  	char str[64];
  	char trenutni[64];
  	int i,j;
	
  usartPutString("Unesite svoje ime i prezime \r\n");
  while(1)
	{
			char str[64];
			while(!usartAvailable());
			_delay_ms(100);
			
      		
      		
			usartGetString(str);
			
			usartPutString("zdravo \r \n");
      		usartPutString(str);
      		usartPutString("\n");
      		
       
		int a = 0;

		for(int row = 0; row < 32; row++){
  			for(int column=0;column < 32; column++){
    			ime[row][column] = str[a];
    				a++;
  			}     
		}
      
      
      
      
      		for(i=0; i<BR_KORISNIKA; i++)
         	{
   				for (int j = 0; j < 64; ++j){
            			if(ime[i][j]== korisnici[i][j]){
              				
                          	usartPutString("Vase ime se nalazi u bazi\n");
                          	
                          	usartPutString("Ukucajte Vas PIN\n");
              				_delay_ms(100);
                          	j=64;
                          	i=BR_KORISNIKA;
              				
            			}
                     
            
              	}
            
            }
    
    //while(1){
    
   // }
      	char tmp[64];
    	int br_pokusaja;
    	while(!usartAvailable());
		_delay_ms(100);
			
      	usartGetString(tmp);
		usartPutString("****");
      	usartPutString("\n");
    
    	int x = 0;

		for(int row = 0; row < 32; row++){
  			for(int column=0;column < 32; column++){
    			pin_pokusaj[row][column] = tmp[x];
    				x++;
  			}     
		}
      
   
      		for(i=0; i<BR_KORISNIKA; i++)
         	{
   				for (int j = 0; j < 64; ++j){
            			if(pin_pokusaj[i][j]== PIN[i][j]){
              				_delay_ms(100);
                          	usartPutString("Vase PIN je ok\n");
                          	
                          	usartPutString("Sta zelite sledece?\n");
              				_delay_ms(100);
                          	j=64;
                          	i=BR_KORISNIKA;
              				
            			}
                  	else{
                            usartPutString("Vase pin nije tacan\n");
              				_delay_ms(100);
                          	j=64;
                          	i=BR_KORISNIKA;
                  }
            
              	}
  
 		}
  
  }

	return 0;
}